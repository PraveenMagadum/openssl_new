Openssl server:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#define PORT 4433
// Initialize OpenSSL library
void Init_OpenSSL() {
 SSL_load_error_strings();
 OpenSSL_add_ssl_algorithms();
}
// Clean up OpenSSL library
void Clean_OpenSSL() {
 EVP_cleanup();
}
// Create SSL context
SSL_CTX* Create_SSL_Context() {
 const SSL_METHOD* method = TLS_server_method();
 SSL_CTX* ctx = SSL_CTX_new(method);
 if (!ctx) {
 perror("Unable to create SSL context");
 ERR_print_errors_fp(stderr);
 exit(EXIT_FAILURE);
 }
 return ctx;
}
// Configure SSL context with server certificate and key
void Configure_SSL_CTX(SSL_CTX* ctx) {
 if (SSL_CTX_use_certificate_file(ctx, "server.crt", SSL_FILETYPE_PEM) <= 0) {
 ERR_print_errors_fp(stderr);
 exit(EXIT_FAILURE);
 }
 if (SSL_CTX_use_PrivateKey_file(ctx, "server.key", SSL_FILETYPE_PEM) <= 0) {
 ERR_print_errors_fp(stderr);
 exit(EXIT_FAILURE);
 }
 if (!SSL_CTX_check_private_key(ctx)) {
 fprintf(stderr, "Private key does not match certificate\n");
 exit(EXIT_FAILURE);
 }
}
int main() {
 Init_OpenSSL();
 SSL_CTX* ctx = Create_SSL_Context();
 Configure_SSL_CTX(ctx);
 int server_fd = socket(AF_INET, SOCK_STREAM, 0);
 if (server_fd == -1) {
 perror("Failed to create socket");
 exit(EXIT_FAILURE);
 }
 struct sockaddr_in addr;
 addr.sin_family = AF_INET;
 addr.sin_addr.s_addr = INADDR_ANY;
 addr.sin_port = htons(PORT);
 if (bind(server_fd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
 perror("Bind failed");
 exit(EXIT_FAILURE);
 }
 if (listen(server_fd, 1) == -1) {
 perror("Listen failed");
 exit(EXIT_FAILURE);
 }
 printf("Server is listening on port %d...\n", PORT);
 int client_fd = accept(server_fd, NULL, NULL);
 if (client_fd == -1) {
 perror("Accept failed");
 exit(EXIT_FAILURE);
 }
 SSL* ssl = SSL_new(ctx);
 SSL_set_fd(ssl, client_fd);
 if (SSL_accept(ssl) <= 0) {
 ERR_print_errors_fp(stderr);
 } else {
 printf("SSL Connection Established!\n");
 char buffer[1024];
 int bytes = SSL_read(ssl, buffer, sizeof(buffer) - 1);
 if (bytes > 0) {
 buffer[bytes] = '\0';
 printf("Received: %s\n", buffer);
 SSL_write(ssl, "Hello from the server!", 23);
 }
 }
 SSL_shutdown(ssl);
 SSL_free(ssl);
 close(client_fd);
 close(server_fd);
 SSL_CTX_free(ctx);
 Clean_OpenSSL();
 return 0;
}





Openssl client:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 4433
// Initialize OpenSSL library
void Init_OpenSSL() {
 SSL_load_error_strings();
 OpenSSL_add_ssl_algorithms();
}
// Clean up OpenSSL library
void Clean_OpenSSL() {
 EVP_cleanup();
}
// Create SSL context
SSL_CTX* Create_SSL_Context() {
 const SSL_METHOD* method = TLS_client_method();
 SSL_CTX* ctx = SSL_CTX_new(method);
 if (!ctx) {
 perror("Unable to create SSL context");
 ERR_print_errors_fp(stderr);
 exit(EXIT_FAILURE);
 }
 return ctx;
}
int main() {
 Init_OpenSSL();
 SSL_CTX* ctx = Create_SSL_Context();
 int sock = socket(AF_INET, SOCK_STREAM, 0);
 if (sock == -1) {
 perror("Socket creation failed");
 exit(EXIT_FAILURE);
 }
 struct sockaddr_in server_addr;
 server_addr.sin_family = AF_INET;
 server_addr.sin_port = htons(SERVER_PORT);
 server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
 if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
perror("Connection failed");
 exit(EXIT_FAILURE);
 }
 SSL* ssl = SSL_new(ctx);
 SSL_set_fd(ssl, sock);
 if (SSL_connect(ssl) <= 0) {
 ERR_print_errors_fp(stderr);
 } else {
 printf("SSL Connection Established!\n");
 SSL_write(ssl, "Hello from the client!", 23);
 char buffer[1024];
 int bytes = SSL_read(ssl, buffer, sizeof(buffer) - 1);
 if (bytes > 0) {
 buffer[bytes] = '\0';
 printf("Received from server: %s\n", buffer);
 }
 }
 SSL_shutdown(ssl);
 SSL_free(ssl);
 close(sock);
 SSL_CTX_free(ctx);
 Clean_OpenSSL();
 return 0;
}
